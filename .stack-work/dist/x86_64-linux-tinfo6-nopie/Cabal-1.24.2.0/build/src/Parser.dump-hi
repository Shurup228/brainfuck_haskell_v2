
==================== FINAL INTERFACE ====================
2017-12-03 02:47:37.596873881 UTC

interface hbrainfuck-0.1.0.0-B95AI9zbtcOI3nw9DpqeuW:Parser 8002
  interface hash: 7bc97d7eff926a35a6708b70d124176a
  ABI hash: 29eae9b724ce95651634f6cff0ed6272
  export-list hash: d9ffbe340ef63109b465b7bca446adef
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 40a8fcdbe93e1ce634bd0e06eb686ae4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.parse
  Parser.Token{Parser.Change Parser.Loop Parser.Move Parser.Print Parser.Put}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      protolude-0.1.10@protolude-0.1.10-EbWghKT4Ra36YSCOzDFDKT*
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  protolude-0.1.10@protolude-0.1.10-EbWghKT4Ra36YSCOzDFDKT:Protolude d65a41c9675ecca5db0df7b40ef7623b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text e8aa34be3dde178f567ae461e65c988b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
7d770c901ba6df6fe2b53570f3c90796
  $fEqToken :: GHC.Classes.Eq Parser.Token
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Token Parser.$fEqToken_$c== Parser.$fEqToken_$c/= -}
7d770c901ba6df6fe2b53570f3c90796
  $fEqToken_$c/= :: Parser.Token -> Parser.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Parser.Token) (b :: Parser.Token) ->
                 case Parser.$fEqToken_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7d770c901ba6df6fe2b53570f3c90796
  $fEqToken_$c== :: Parser.Token -> Parser.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7d770c901ba6df6fe2b53570f3c90796
  $fShowToken :: GHC.Show.Show Parser.Token
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Token
                  Parser.$fShowToken_$cshowsPrec
                  Parser.$fShowToken_$cshow
                  Parser.$fShowToken_$cshowList -}
7d770c901ba6df6fe2b53570f3c90796
  $fShowToken1 :: Parser.Token -> GHC.Show.ShowS
  {- Arity: 2 -}
cfa03cbd0c240e76e9bf0691ba128e9c
  $fShowToken2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Loop "#) -}
6e63e7b6f8b65040b7a8df382cad1c1c
  $fShowToken3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Put"#) -}
1a9d2dcb7929485a1032fe3bedc3b723
  $fShowToken4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Print"#) -}
6dfd7a141ff17dd4bb4696564fa8568b
  $fShowToken5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Change "#) -}
9e755cab9633daa73f9857311607adb0
  $fShowToken6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Move "#) -}
7d770c901ba6df6fe2b53570f3c90796
  $fShowToken_$cshow :: Parser.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Parser.Token) ->
                 case x of wild {
                   Parser.Move b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Parser.$fShowToken6
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Parser.Change b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Parser.$fShowToken5
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Parser.Print -> Parser.$fShowToken4
                   Parser.Put -> Parser.$fShowToken3
                   Parser.Loop b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Parser.$fShowToken2
                        (GHC.Show.showList__
                           @ Parser.Token
                           Parser.$fShowToken1
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
7d770c901ba6df6fe2b53570f3c90796
  $fShowToken_$cshowList :: [Parser.Token] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Parser.Token
                   Parser.$fShowToken1) -}
7d770c901ba6df6fe2b53570f3c90796
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int -> Parser.Token -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Parser.Token)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Parser.Move b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Parser.$fShowToken6
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Parser.$fShowToken6
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }
                   Parser.Change b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Parser.$fShowToken5
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Parser.$fShowToken5
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }
                   Parser.Print
                   -> GHC.Base.++ @ GHC.Types.Char Parser.$fShowToken4 eta
                   Parser.Put -> GHC.Base.++ @ GHC.Types.Char Parser.$fShowToken3 eta
                   Parser.Loop b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Parser.$fShowToken2
                             (GHC.Show.showList__ @ Parser.Token Parser.$fShowToken1 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Parser.$fShowToken2
                                (GHC.Show.showList__
                                   @ Parser.Token
                                   Parser.$fShowToken1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta))) } } }) -}
cd7c33ef2e9b8505579db949d28a83ba
  $tc'Change :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15164146161965035424##
                   4327244789609577682##
                   Parser.$trModule
                   Parser.$tc'Change1) -}
953f0254e3eb39aa6da9ef3a7bfdc146
  $tc'Change1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Change"#) -}
94b6febf43f44d391d74e7737cf1d5f7
  $tc'Loop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2667876102619321447##
                   4890944052986021921##
                   Parser.$trModule
                   Parser.$tc'Loop1) -}
785b62b5fd86cc9fb9aa8df611e5210d
  $tc'Loop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Loop"#) -}
00e27bdd98d74f4ec5f345830784f28d
  $tc'Move :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3032474621367275910##
                   8265006168348372952##
                   Parser.$trModule
                   Parser.$tc'Move1) -}
13b221b1f7fea1da887fdead4130d5de
  $tc'Move1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Move"#) -}
2ed63af32f0ea8ae3ed1f0b42b6a9ff9
  $tc'Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13196875718179308723##
                   5194102184228057333##
                   Parser.$trModule
                   Parser.$tc'Print1) -}
339ee86270501a539da8be42df889860
  $tc'Print1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Print"#) -}
afbc219e5751cad83db006f355793c9a
  $tc'Put :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1084614641646880435##
                   4814603308354053669##
                   Parser.$trModule
                   Parser.$tc'Put1) -}
3bb9605d64b22b9c49661c4520a1c790
  $tc'Put1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Put"#) -}
66fddc6cc5577ae421ff6d18c5faa48a
  $tcToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3855776397737463895##
                   5933659605729928990##
                   Parser.$trModule
                   Parser.$tcToken1) -}
467b05b58f0727bc820f4ac441bb9e32
  $tcToken1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Token"#) -}
cbc0a00ef9a4093b78d5dce989a006b6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule2
                   Parser.$trModule1) -}
1f4d3ed8b3f0535aae81282d44fdfdab
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parser"#) -}
95f5f0ac2a70f40ea5ccc3ea28815c59
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hbrainfuck-0.1.0.0-B95AI9zbtcOI3nw9DpqeuW"#) -}
3bb941d3c3e76b21078e3576947c85f0
  $wparse ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> [Parser.Token]
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0] -}
7d770c901ba6df6fe2b53570f3c90796
  data Token
    = Move GHC.Types.Int
    | Change GHC.Types.Int
    | Print
    | Put
    | Loop [Parser.Token]
e6f873ea2d2fa78dfa618ddc0a799731
  parse :: Data.Text.Internal.Text -> [Parser.Token]
  {- Arity: 1, Strictness: <S(LLS),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Parser.$wparse ww1 ww2 ww3 }) -}
instance [safe] GHC.Classes.Eq [Parser.Token] = Parser.$fEqToken
instance [safe] GHC.Show.Show [Parser.Token] = Parser.$fShowToken
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

